
/*  ----------------------------------------------------------
    1.  Data pasted directly from Excel (comma-separated)
---------------------------------------------------------- */
const rawCSV = `Time (s),Bottomhole Pressure (Pa),Pump Output Pressure (Pa),Pump Intake Pressure (Pa),Well Head Pressure (Pa),Flow Rate (m^3/s),Viscosity (Pa.s),Delta Pump (Pa),Current (Amps)
0,10000000,1000000,1000000,5000000,0.01,0.1,0,0
0.05,9918944.6716,16116494.038,7423462.6864,4749282.8223,0.010601359049,0.1,8693031.3511,56.708456771
0.1,9831366.6277,15860082.026,7267930.0365,4511464.0104,0.01115711462,0.1,8592151.9896,57.429199905
0.15,9738370.8039,15603252.878,7109703.5279,4285951.5064,0.011665713995,0.1,8493549.3504,58.067727395
0.2,9641017.1133,15349554.177,6950655.2053,4072157.0984,0.012127131791,0.1,8398898.9717,58.628962564
0.25,9540301.0889,15101809.007,6792349.6823,3869506.0551,0.012542538311,0.1,8309459.3242,59.119061507
0.3,9437140.8932,14862143.863,6636051.7679,3677444.08,0.012913985571,0.1,8226092.0955,59.544778705
0.35,9332369.8128,14632057.09,6482750.2019,3495441.9088,0.01324412817,0.1,8149306.8876,59.912991566
0.4,9226733.2398,14412509.119,6333190.5188,3322997.9365,0.013535987772,0.1,8079318.6,60.230369796
0.45,9120889.1421,14204019.944,6187911.5536,3159639.2741,0.013792763489,0.1,8016108.3899,60.50316524
0.5,9015411.0994,14006763.637,6047281.7027,3004921.612,0.014017686047,0.1,7959481.9341,60.737094943
0.55,8910793.1116,13820653.727,5911532.4897,2858428.2248,0.014213910949,0.1,7909121.2369,60.937291841
0.6000000000000001,8807455.5173,13645416.334,5780788.1238,2719768.399,0.014384444631,0.1,7864628.2105,61.108301526
0.65,8705751.5056,13480650.211,5655090.5648,2588575.509,0.014532097353,0.1,7825559.6462,61.254108155
0.7000000000000001,8605973.8258,13325874.228,5534420.1449,2464504.9213,0.01465945691,0.1,7791454.083,61.378177052
0.75,8508361.4101,13180563.669,5418712.1177,2347231.8558,0.014768877972,0.1,7761851.5513,61.483505291
0.8,8413105.7131,13044177.024,5307869.6564,2236449.3023,0.014862482687,0.1,7736307.3671,61.572674498
0.8500000000000001,8320356.6427,12916175.026,5201773.8679,2131866.0551,0.01494216901,0.1,7714401.158,61.647902282
0.9,8230228.0105,12796033.579,5100291.3727,2033204.9093,0.015009624015,0.1,7695742.2063,61.711090245
0.9500000000000001,8142802.4709,12683251.987,5003279.9431,1940201.0403,0.015066340099,0.1,7679972.044,61.763867547
1,8058135.945,12577357.697,4910592.6232,1852600.5794,0.015113632555,0.1,7666765.0737,61.807629674
1.05,7976261.5455,12477908.511,4822080.6826,1770159.384,0.015152657419,0.1,7655827.8283,61.843572458
1.1,7897193.0325,12384493.034,4737595.6867,1692641.9982,0.015184428856,0.1,7646897.3472,61.87272163
1.15,7820927.8341,12296729.932,4656990.9101,1619820.7926,0.015209835614,0.1,7639739.0224,61.895958291
1.2,7747449.6739,12214266.445,4580122.267,1551475.2696,0.015229656246,0.1,7634144.1776,61.914040763
1.25,7676730.8431,12136776.455,4506848.8942,1487391.5197,0.015244572977,0.1,7629927.5612,61.927623223
1.3,7608734.1595,12063958.368,4437033.4869,1427361.812,0.015255184157,0.1,7626924.8811,61.93727157
1.35,7543414.6483,11995532.924,4370542.4646,1371184.3024,0.015262015327,0.1,7624990.4598,61.943476873
1.4,7480720.9819,11931241.083,4307246.0226,1318662.8431,0.015265528966,0.1,7623995.0607,61.946666756
1.45,7420596.7089,11870842.019,4247018.1102,1269606.877,0.015266133009,0.1,7623823.9091,61.947215015
1.5,7362981.3008,11814111.281,4189736.364,1223831.4015,0.015264188238,0.1,7624374.9173,61.945449713
1.55,7307811.0439,11760839.129,4135282.0182,1181156.9862,0.015260014664,0.1,7625557.1112,61.941659997
1.6,7255019.7958,11710829.055,4083539.8048,1141409.8316,0.015253897004,0.1,7627289.2502,61.936101817
1.65,7204539.6287,11663896.477,4034397.8532,1104421.8543,0.015246089364,0.1,7629498.6243,61.929002714
1.7,7156301.3749,11619867.61,3987747.5957,1070030.789,0.015236819221,0.1,7632120.014,61.92056583
1.75,7110235.0906,11578578.476,3943483.6809,1038080.2938,0.015226290808,0.1,7635094.7953,61.910973249
1.8,7066270.4493,11539874.07,3901503.8978,1008420.0524,0.01521468797,0.1,7638370.1725,61.900388787
1.85,7024337.0761,11503607.631,3861709.1092,980905.86403,0.015202176586,0.1,7641898.5223,61.888960303
1.9,6984364.8323,11469640.03,3824003.1957,955399.71449,0.015188906603,0.1,7645636.8348,61.876821635
1.95,6946284.0583,11437839.243,3788293.0078,931769.82396,0.015175013756,0.1,7649546.2355,61.864094199
2,6910025.7795,11408079.903,3754488.325,909890.66781,0.015160621021,0.1,7653591.578,61.850888319
2.05,6875521.8831,11380242.914,3722501.8206,889642.96806,0.015145839846,0.1,7657741.0938,61.837304346
2.1,6842705.2683,11354215.122,3692249.0302,870913.65452,0.015130771195,0.1,7661966.0919,61.823433582
2.15,6811509.9749,11329889.02,3663648.323,853595.79568,0.015115506451,0.1,7666240.6971,61.809359068
2.2,6781871.2924,11307162.496,3636620.874,837588.50029,0.015100128186,0.1,7670541.6224,61.795156248
2.25,6753725.853,11285938.603,3611090.6361,822796.79148,0.015084710839,0.1,7674847.9672,61.78089354
2.3,6727011.7099,11266125.349,3586984.3107,809131.45573,0.015069321315,0.1,7679141.038,61.766632832
2.35,6701668.4031,11247635.504,3564231.3173,796508.86962,0.015054019515,0.1,7683404.1865,61.752429918
2.4,6677637.0139,11230386.421,3542763.7591,784850.80744,0.015038858822,0.1,7687622.6614,61.738334894
2.45,6654860.2089,11214299.86,3522516.3867,774084.23301,0.015023886547,0.1,7691783.4729,61.724392511
2.5,6633282.2758,11199301.823,3503426.5575,764141.07906,0.015009144333,0.1,7695875.2656,61.710642506
2.55,6612849.1497,11185322.392,3485434.192,754958.01739,0.014994668549,0.1,7699888.2001,61.697119912
2.6,6593508.4328,11172295.567,3468481.7265,746476.22295,0.014980490649,0.1,7703813.8407,61.683855349
2.65,6575209.4069,11160159.111,3452514.062,738641.1348,0.014966637524,0.1,7707645.0494,61.670875309
2.7,6557903.0389,11148854.394,3437478.5095,731402.21647,0.014953131828,0.1,7711375.8848,61.658202424
2.75,6541541.9813,11138326.239,3423324.7332,724712.71815,0.014939992301,0.1,7715001.5055,61.645855729
2.8,6526080.5669,11128522.768,3410004.6897,718529.4427,0.014927234073,0.1,7718518.0785,61.633850917
2.85,6511474.7981,11119395.257,3397472.5651,712812.51722,0.014914868958,0.1,7721922.6917,61.622200586
2.9,6497682.3324,11110897.98,3385684.7104,707525.17154,0.014902905734,0.1,7725213.27,61.610914482
2.95,6484662.4632,11102988.071,3374599.5744,702633.52489,0.014891350416,0.1,7728388.4963,61.599999728
3,6472376.0968,11095625.372,3364177.6359,698106.38147,0.014880206512,0.1,7731447.7365,61.589461054
3.05,6460785.7265,11088772.302,3354381.3341,693915.03567,0.014869475268,0.1,7734390.9679,61.57930101
3.1,6449855.4026,11082393.712,3345174.9991,690033.08728,0.014859155904,0.1,7737218.7126,61.569520178
3.15,6439550.7012,11076456.756,3336524.7819,686436.26694,0.014849245835,0.1,7739931.9745,61.560117371
3.2,6429838.689,11070930.764,3328398.5839,683102.27189,0.014839740875,0.1,7742532.1802,61.55108982
3.25,6420687.8872,11065787.112,3320765.9874,680010.61204,0.014830635438,0.1,7745021.1244,61.542433358
3.3,6412068.2334,11060999.105,3313598.1863,677142.466,0.014821922719,0.1,7747400.9186,61.534142587
3.35,6403951.0415,11056541.862,3306867.9176,674480.54699,0.014813594862,0.1,7749673.9443,61.52621104
3.4,6396308.9613,11052392.204,3300549.3946,672008.97815,0.014805643121,0.1,7751842.8094,61.518631328
3.45,6389115.9363,11048528.549,3294618.2402,669713.17702,0.014798058006,0.1,7753910.3083,61.511395281
3.5,6382347.1617,11044930.809,3289051.4229,667579.74854,0.014790829414,0.1,7755879.3859,61.504494074
3.55,6375979.0414,11041580.298,3283827.1934,665596.38637,0.014783946752,0.1,7757753.1042,61.497918348
3.6,6369989.145,11038459.636,3278925.0233,663751.78186,0.014777399052,0.1,7759534.6128,61.491658318
3.65,6364356.1646,11035552.668,3274325.5458,662035.54027,0.014771175066,0.1,7761227.1219,61.48570387
3.7,6359059.872,11032844.376,3270010.4981,660438.10388,0.014765263363,0.1,7762833.8784,61.480044651
3.75,6354081.0764,11030320.81,3265962.6653,658950.68131,0.014759652405,0.1,7764358.1443,61.474670154
3.8,6349401.5816,11027969.005,3262165.8271,657565.18278,0.014754330621,0.1,7765803.1783,61.469569785
3.85,6345004.1453,11025776.924,3258604.7057,656274.16085,0.014749286471,0.1,7767172.2187,61.46473293
3.9,6340872.4379,11023733.386,3255264.9167,655070.75614,0.014744508504,0.1,7768468.4694,61.460149013
3.95,6336991.0023,11021828.008,3252132.9208,653948.64772,0.014739985403,0.1,7769695.0874,61.455807545
4,6333345.2155,11020051.15,3249195.9784,652902.00781,0.014735706029,0.1,7770855.1719,61.451698167
4.05,6329921.2499,11018393.862,3246442.106,651925.46035,0.014731659457,0.1,7771951.7558,61.44781069
4.100000000000001,6326706.0364,11016847.832,3243860.0345,651014.04323,0.014727835005,0.1,7772987.7976,61.444135123
4.15,6323687.2284,11015405.345,3241439.1691,650163.17378,0.014724222261,0.1,7773966.176,61.440661704
4.2,6320853.1673,11014059.236,3239169.5517,649368.61731,0.014720811102,0.1,7774889.6846,61.43738092
4.25,6318192.8482,11012802.853,3237041.8249,648626.45839,0.014717591709,0.1,7775761.0282,61.434283527
4.3,6315695.8876,11011630.017,3235047.1971,647933.07462,0.014714554582,0.1,7776582.8202,61.43136056
4.350000000000001,6313352.4923,11010534.991,3233177.4108,647285.11279,0.014711690546,0.1,7777357.5805,61.428603351
4.4,6311153.4287,11009512.445,3231424.7106,646679.467,0.014708990761,0.1,7778087.7347,61.426003529
4.45,6309089.9944,11008557.428,3229781.8151,646113.2588,0.01470644672,0.1,7778775.6131,61.42355303
4.5,6307153.9896,11007665.34,3228241.8881,645583.81898,0.014704050253,0.1,7779423.4518,61.4212441
4.55,6305337.6914,11006831.905,3226798.5128,645088.67101,0.014701793527,0.1,7780033.3922,61.419069292
4.600000000000001,6303633.8276,11006053.15,3225445.6669,644625.51581,0.014699669042,0.1,7780607.4832,61.417021468
4.65,6302035.5523,11005325.381,3224177.6992,644192.21794,0.014697669623,0.1,7781147.6822,61.415093794
4.7,6300536.4233,11004645.164,3222989.3069,643786.79293,0.014695788421,0.1,7781655.8569,61.413279737
4.75,6299130.379,11004009.303,3221875.5154,643407.39562,0.014694018902,0.1,7782133.7875,61.41157306
4.800000000000001,6297811.7179,11003414.827,3220831.658,643052.30959,0.014692354839,0.1,7782583.1689,61.409967815
4.850000000000001,6296575.0784,11002858.971,3219853.3572,642719.93741,0.014690790306,0.1,7783005.6135,61.408458334
4.9,6295415.4193,11002339.161,3218936.5075,642408.79173,0.014689319669,0.1,7783402.6533,61.407039227
4.95,6294328.0018,11001853.002,3218077.2587,642117.48708,0.014687937574,0.1,7783775.743,61.405705366
5,6293308.3725,11001398.263,3217272.0002,641844.73235,0.014686638938,0.1,7784126.2627,61.404451881`;

/*  ----------------------------------------------------------
    2.  Parse CSV → array of objects
---------------------------------------------------------- */
function parseCSV(rawCSV) {
  return d3.csvParse(rawCSV, d3.autoType);
}



const data = parseCSV(rawCSV);


// ┌---- reusable chart-builder ----┐
function buildMiniChart(containerId, colName, data, colour = '#4da6ff') {
  const margin = {top: 15, right: 15, bottom: 25, left: 65},
        width  = 340 - margin.left - margin.right,
        height = 160 - margin.top - margin.bottom;

  const x = d3.scaleLinear()
            .domain(d3.extent(data, d => d['Time (s)']))
            .range([0, width]);
  const y = d3.scaleLinear()
            .domain(d3.extent(data, d => d[colName])).nice()
            .range([height, 0]);

  const svg = d3.select(containerId)
              .append('svg')
              .attr('width', width + margin.left + margin.right)
              .attr('height', height + margin.top + margin.bottom);

  const g = svg.append('g')
              .attr('transform', `translate(${margin.left},${margin.top})`);

  g.append('g').attr('class','axis')
   .attr('transform', `translate(0,${height})`)
   .call(d3.axisBottom(x).ticks(4));
  g.append('g').attr('class','axis')
   .call(d3.axisLeft(y).ticks(3));

  const line = d3.line()
                .x(d => x(d['Time (s)']))
                .y(d => y(d[colName]))
                .curve(d3.curveMonotoneX);

  const path = g.append('path')
                .datum(data)
                .attr('fill','none')
                .attr('stroke', colour)
                .attr('stroke-width', 2)
                .attr('d', line);

  /* tiny title */
  svg.append('text')
     .attr('x', margin.left)
     .attr('y', 12)
     .style('font-size','11px')
     .text(colName)
     .attr('fill','white');

  /* optional draw-on animation */
  const total = path.node().getTotalLength();
  path.attr('stroke-dasharray', `${total} ${total}`)
      .attr('stroke-dashoffset', total)
      .transition().duration(800).ease(d3.easeLinear)
      .attr('stroke-dashoffset', 0);
}




/* =========================================================
   ONE FUNCTION = small-multiples (non-Pa) + overlaid Pa chart
   Call:  drawAllCharts(data);
   ========================================================= */
export function drawAllCharts(selector) {
  /* ---------- shared geometry ---------- */
  const margin = { top: 20, right: 20, bottom: 30, left: 65 },
        width  = 520 - margin.left - margin.right,
        height = 200 - margin.top  - margin.bottom;

  /* ---------- helper – draw a single overlaid chart ---------- */
  function overlaidPressureChart() {
    const cols = data.columns.filter(c => c.includes('Pressure (Pa)'));

    const x = d3.scaleLinear()
              .domain(d3.extent(data, d => d['Time (s)']))
              .range([0, width]);
    const y = d3.scaleLinear()
              .domain([
                d3.min(cols, c => d3.min(data, d => d[c])),
                d3.max(cols, c => d3.max(data, d => d[c]))
              ])
              .nice()
              .range([height, 0]);

    const colours   = ['#ff4d4d','#ff66aa','#66ffcc','#ffcc00','#aa66ff'];
    const dashPat   = ['none','3,3','8,4','8,4,3,4','12,4'];

    const svg = d3.select(selector).append('svg')
                .attr('width', width + margin.left + margin.right)
                .attr('height', height + margin.top + margin.bottom);
    const g = svg.append('g')
                .attr('transform', `translate(${margin.left},${margin.top})`);

    g.append('g').attr('class','axis')
     .attr('transform', `translate(0,${height})`)
     .call(d3.axisBottom(x).ticks(5));
    g.append('g').attr('class','axis')
     .call(d3.axisLeft(y).ticks(4));

    cols.forEach((col,i)=>{
      const line = d3.line()
                    .x(d=>x(d['Time (s)']))
                    .y(d=>y(d[col]))
                    .curve(d3.curveMonotoneX);
      const path = g.append('path')
                    .datum(data)
                    .attr('class','line')
                    .attr('fill','none')
                    .attr('d', line)
                    .attr('stroke', colours[i%colours.length])
                    .attr('stroke-dasharray', dashPat[i%dashPat.length]);

      const total = path.node().getTotalLength();
      path.attr('stroke-dasharray', `${total} ${total}`)
          .attr('stroke-dashoffset', total)
          .transition().duration(1000).ease(d3.easeLinear)
          .attr('stroke-dashoffset', 0)
          .transition().delay(2000).duration(0)
          .on('start', () => d3.select(path.node()).dispatch('replay'));

      path.on('replay', function () {
        d3.select(this)
          .attr('stroke-dashoffset', total)
          .transition().duration(1000).ease(d3.easeLinear)
          .attr('stroke-dashoffset', 0)
          .transition().delay(2000).duration(0)
          .on('start', () => d3.select(this).dispatch('replay'));
      });
    });

    /* legend */
    const legend = svg.append('g')
                     .attr('transform', `translate(${width+margin.left+10},20)`);
    legend.selectAll(null)
          .data(cols)
          .enter()
          .append('g')
          .attr('transform',(_,i)=>`translate(0,${i*18})`)
          .call(g=>{
            g.append('line').attr('x1',0).attr('x2',18)
             .attr('stroke',(_,i)=>colours[i%colours.length])
             .attr('stroke-dasharray',(_,i)=>dashPat[i%dashPat.length]);
            g.append('text').attr('x',22).attr('y',4)
             .text(d=>d).style('font-size','12px').attr('fill','white');
          });
  }

  /* ---------- small multiples (non-Pa) ---------- */
  const smallCols = data.columns.filter(
        c => c !== 'Time (s)' && !c.includes('Pressure (Pa)')
  );

  smallCols.forEach(col=>{
    const x = d3.scaleLinear()
              .domain(d3.extent(data, d => d['Time (s)']))
              .range([0, width]);
    const y = d3.scaleLinear()
              .domain(d3.extent(data, d => d[col])).nice()
              .range([height, 0]);

    const svg = d3.select(selector).append('svg')
                .attr('width', width + margin.left + margin.right)
                .attr('height', height + margin.top + margin.bottom);
    const g = svg.append('g')
                .attr('transform', `translate(${margin.left},${margin.top})`);

    g.append('g').attr('class','axis')
     .attr('transform', `translate(0,${height})`)
     .call(d3.axisBottom(x).ticks(5));
    g.append('g').attr('class','axis')
     .call(d3.axisLeft(y).ticks(4));

    svg.append('text')
       .attr('x', margin.left).attr('y', 14)
       .style('font-size','13px')
       .text(col).attr('fill','white');

    const line = d3.line()
                  .x(d=>x(d['Time (s)']))
                  .y(d=>y(d[col]))
                  .curve(d3.curveMonotoneX);
    const path = g.append('path')
                  .datum(data)
                  .attr('class','line')
                  .attr('d', line)
                  .attr('stroke','#4da6ff');

    const total = path.node().getTotalLength();
    path.attr('stroke-dasharray', `${total} ${total}`)
        .attr('stroke-dashoffset', total)
        .transition().duration(1000).ease(d3.easeLinear)
        .attr('stroke-dashoffset', 0)
        .transition().delay(2000).duration(0)
        .on('start', () => d3.select(path.node()).dispatch('replay'));

    path.on('replay', function () {
      d3.select(this)
        .attr('stroke-dashoffset', total)
        .transition().duration(1000).ease(d3.easeLinear)
        .attr('stroke-dashoffset', 0)
        .transition().delay(2000).duration(0)
        .on('start', () => d3.select(this).dispatch('replay'));
    });
  });

  /* finally add the overlaid pressure chart once */
  overlaidPressureChart();
}

